import sys
import os
import platform
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è Qt –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º PyQt5
if platform.system() == "Windows":
    # –ü—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω–∞–º –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    venv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'venv')
    if os.path.exists(venv_path):
        plugin_path = os.path.join(venv_path, 'Lib', 'site-packages', 'PyQt5', 'Qt', 'plugins')
        if os.path.exists(plugin_path):
            os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = plugin_path
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω–∞–º: {plugin_path}")
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            plugin_path = os.path.join(venv_path, 'Lib', 'site-packages', 'PyQt5', 'Qt5', 'plugins')
            if os.path.exists(plugin_path):
                os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = plugin_path
                print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω–∞–º: {plugin_path}")
            else:
                print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω–∞–º Qt –≤ venv")

try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                                 QHBoxLayout, QPushButton, QLabel, QScrollArea, 
                                 QSplitter, QFrame, QSizePolicy, QFileDialog)
    from PyQt5.QtCore import Qt, pyqtSignal
    from PyQt5.QtGui import QPixmap, QImage
    import fitz
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("venv\\Scripts\\activate")
    print("pip install PyQt5 PyMuPDF")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(1)

class ThumbnailWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä —Å—Ç—Ä–∞–Ω–∏—Ü"""
    pageClicked = pyqtSignal(int)
    
    def __init__(self, doc_path):
        super().__init__()
        self.doc_path = doc_path
        self.doc = fitz.open(doc_path)
        self.current_page = 0
        self.thumbnails = []
        self.init_ui()
        self.load_thumbnails()
        
    def init_ui(self):
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        self.scroll_area = QScrollArea()
        self.scroll_widget = QWidget()
        self.thumb_layout = QVBoxLayout(self.scroll_widget)
        self.scroll_area.setWidget(self.scroll_widget)
        self.scroll_area.setWidgetResizable(True)
        
        layout.addWidget(self.scroll_area)
        
    def load_thumbnails(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—ã –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        for i in range(len(self.doc)):
            try:
                page = self.doc.load_page(i)
                pix = page.get_pixmap(matrix=fitz.Matrix(0.2, 0.2))
                
                img_data = pix.tobytes("ppm")
                qimage = QImage()
                qimage.loadFromData(img_data, "PPM")
                pixmap = QPixmap.fromImage(qimage)
                
                thumb_frame = QFrame()
                thumb_frame.setFrameStyle(QFrame.Box)
                thumb_frame.setLineWidth(2)
                thumb_frame.setFixedHeight(150)
                thumb_layout = QVBoxLayout(thumb_frame)
                
                thumb_label = QLabel()
                thumb_label.setPixmap(pixmap)
                thumb_label.setAlignment(Qt.AlignCenter)
                thumb_label.mousePressEvent = lambda event, page_num=i: self.on_thumbnail_click(page_num)
                
                page_label = QLabel(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}")
                page_label.setAlignment(Qt.AlignCenter)
                
                thumb_layout.addWidget(thumb_label)
                thumb_layout.addWidget(page_label)
                
                self.thumb_layout.addWidget(thumb_frame)
                self.thumbnails.append(thumb_frame)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i}: {e}")
            
        self.highlight_current_page()
    
    def on_thumbnail_click(self, page_num):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∏–Ω–∏–∞—Ç—é—Ä–µ"""
        self.pageClicked.emit(page_num)
    
    def highlight_current_page(self):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        for i, thumb in enumerate(self.thumbnails):
            if i == self.current_page:
                thumb.setStyleSheet("background-color: lightblue; border: 2px solid blue;")
            else:
                thumb.setStyleSheet("background-color: white; border: 1px solid gray;")
    
    def set_current_page(self, page_num):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        self.current_page = page_num
        self.highlight_current_page()

class PDFViewer(QMainWindow):
    def __init__(self, pdf_path):
        super().__init__()
        self.pdf_path = pdf_path
        self.doc = fitz.open(pdf_path)
        self.current_page = 0
        self.total_pages = len(self.doc)
        
        self.presenter_window = None
        self.photo = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        self.init_ui()
        self.load_page(0)
        
    def init_ui(self):
        self.setWindowTitle(f"PDF Reader - {os.path.basename(self.pdf_path)}")
        self.setGeometry(100, 100, 1200, 800)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QHBoxLayout(central_widget)
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä PDF
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        
        self.pdf_label = QLabel()
        self.pdf_label.setAlignment(Qt.AlignCenter)
        self.pdf_label.setStyleSheet("border: 1px solid gray; background-color: white;")
        self.pdf_label.setMinimumSize(400, 200)
        self.pdf_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.pdf_label.setScaledContents(False)  # –í–∞–∂–Ω–æ: –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        scroll_area = QScrollArea()
        scroll_area.setWidget(self.pdf_label)
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        left_layout.addWidget(scroll_area)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = self.create_control_panel()
        left_layout.addWidget(control_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        self.thumbnail_widget = ThumbnailWidget(self.pdf_path)
        self.thumbnail_widget.pageClicked.connect(self.on_thumbnail_click)
        self.thumbnail_widget.setMaximumWidth(350)
        
        splitter.addWidget(left_panel)
        splitter.addWidget(self.thumbnail_widget)
        splitter.setSizes([400, 200])
        
        main_layout.addWidget(splitter)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞
        self.create_presenter_window()
        
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        panel = QWidget()
        layout = QHBoxLayout(panel)
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        self.prev_btn = QPushButton("‚Üê –ü—Ä–µ–¥.")
        self.prev_btn.clicked.connect(self.previous_page)
        self.prev_btn.setMinimumHeight(35)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self.page_info = QLabel()
        self.page_info.setStyleSheet("font-weight: bold; font-size: 14px;")
        self.update_page_info()
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        self.next_btn = QPushButton("–°–ª–µ–¥. ‚Üí")
        self.next_btn.clicked.connect(self.next_page)
        self.next_btn.setMinimumHeight(35)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞
        self.presenter_btn = QPushButton("üì∫ –†–µ–∂–∏–º –¥–æ–∫–ª–∞–¥—á–∏–∫–∞")
        self.presenter_btn.clicked.connect(self.toggle_presenter_mode)
        self.presenter_btn.setMinimumHeight(35)
        
        layout.addWidget(self.prev_btn)
        layout.addWidget(self.page_info)
        layout.addWidget(self.next_btn)
        layout.addStretch()
        layout.addWidget(self.presenter_btn)
        
        return panel
    
    def create_presenter_window(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞"""
        self.presenter_window = QMainWindow()
        self.presenter_window.setWindowTitle(f"–†–µ–∂–∏–º –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ - {os.path.basename(self.pdf_path)}")
        self.presenter_window.setGeometry(1300, 100, 900, 700)
        
        central_widget = QWidget()
        central_widget.setStyleSheet("background-color: black;")  # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω –≤–æ–∫—Ä—É–≥ —Å–ª–∞–π–¥–∞
        self.presenter_window.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(0, 0, 0, 0)  # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        layout.setSpacing(0)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –æ–∫–Ω–æ
        self.presenter_label = QLabel()
        self.presenter_label.setAlignment(Qt.AlignCenter)
        self.presenter_label.setStyleSheet("background-color: black;")  # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        self.presenter_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.presenter_label.setScaledContents(False)  # –í–∞–∂–Ω–æ: –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        layout.addWidget(self.presenter_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ–∫–Ω–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞
        self.presenter_window.resizeEvent = self.presenter_resize_event
        
    def presenter_resize_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        QMainWindow.resizeEvent(self.presenter_window, event)
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(self, 'current_page'):
            self.load_page(self.current_page)
    
    def get_scaled_pixmap(self, pixmap, max_width, max_height):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç pixmap —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã"""
        original_size = pixmap.size()
        original_width = original_size.width()
        original_height = original_size.height()
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if original_width <= max_width and original_height <= max_height:
            return pixmap
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        width_ratio = max_width / original_width
        height_ratio = max_height / original_height
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ø–∏—Å–∞–ª–æ—Å—å
        scale_factor = min(width_ratio, height_ratio)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        new_width = int(original_width * scale_factor)
        new_height = int(original_height * scale_factor)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        scaled_pixmap = pixmap.scaled(
            new_width, 
            new_height, 
            Qt.KeepAspectRatio, 
            Qt.SmoothTransformation
        )
        
        return scaled_pixmap
    
    def get_presenter_scaled_pixmap(self, pixmap, max_width, max_height):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç pixmap –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ - –≤–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –æ–∫–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
        original_size = pixmap.size()
        original_width = original_size.width()
        original_height = original_size.height()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        width_ratio = max_width / original_width
        height_ratio = max_height / original_height
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ø–∏—Å–∞–ª–æ—Å—å
        scale_factor = min(width_ratio, height_ratio)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        new_width = int(original_width * scale_factor)
        new_height = int(original_height * scale_factor)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        scaled_pixmap = pixmap.scaled(
            new_width, 
            new_height, 
            Qt.KeepAspectRatio, 
            Qt.SmoothTransformation
        )
        
        return scaled_pixmap
    
    def load_page(self, page_num):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if 0 <= page_num < self.total_pages:
            self.current_page = page_num
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                page = self.doc.load_page(page_num)
                pix = page.get_pixmap(matrix=fitz.Matrix(3, 3))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QPixmap
                img_data = pix.tobytes("ppm")
                qimage = QImage()
                qimage.loadFromData(img_data, "PPM")
                original_pixmap = QPixmap.fromImage(qimage)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.photo = original_pixmap
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–µ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                main_label_size = self.pdf_label.size()
                
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã)
                main_max_width = main_label_size.width() - 20
                main_max_height = main_label_size.height() - 20
                main_scaled_pixmap = self.get_scaled_pixmap(original_pixmap, main_max_width, main_max_height)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
                self.pdf_label.setPixmap(main_scaled_pixmap)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
                if self.presenter_window and self.presenter_window.isVisible():
                    presenter_label_size = self.presenter_label.size()
                    
                    # –î–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                    presenter_max_width = presenter_label_size.width() - 10
                    presenter_max_height = presenter_label_size.height() - 10
                    presenter_scaled_pixmap = self.get_presenter_scaled_pixmap(
                        original_pixmap, 
                        presenter_max_width, 
                        presenter_max_height
                    )
                    
                    self.presenter_label.setPixmap(presenter_scaled_pixmap)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                self.update_page_info()
                self.update_presenter_page_info()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—ã
                self.thumbnail_widget.set_current_page(page_num)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
                traceback.print_exc()
    
    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        super().resizeEvent(event)
        # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if hasattr(self, 'current_page'):
            self.load_page(self.current_page)
    
    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"""
        super().showEvent(event)
        # –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(self, 'current_page'):
            QApplication.processEvents()  # –î–∞–µ–º –æ–∫–Ω—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è
            self.load_page(self.current_page)
    
    def update_page_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        self.page_info.setText(f"–°—Ç—Ä. {self.current_page + 1} –∏–∑ {self.total_pages}")
    
    def update_presenter_page_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –æ–∫–Ω–µ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞"""
        # –í —Ä–µ–∂–∏–º–µ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        pass
    
    def previous_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if self.current_page > 0:
            self.load_page(self.current_page - 1)
    
    def next_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if self.current_page < self.total_pages - 1:
            self.load_page(self.current_page + 1)
    
    def on_thumbnail_click(self, page_num):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∏–Ω–∏–∞—Ç—é—Ä–µ"""
        self.load_page(page_num)
    
    def toggle_presenter_mode(self):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –¥–æ–∫–ª–∞–¥—á–∏–∫–∞"""
        if self.presenter_window.isVisible():
            self.presenter_window.hide()
            self.presenter_btn.setText("üì∫ –†–µ–∂–∏–º –¥–æ–∫–ª–∞–¥—á–∏–∫–∞")
        else:
            self.presenter_window.show()

            self.presenter_btn.setText("‚ùå –°–∫—Ä—ã—Ç—å —Ä–µ–∂–∏–º –¥–æ–∫–ª–∞–¥—á–∏–∫–∞")
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.load_page(self.current_page)
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            screens = QApplication.screens()
            if len(screens) > 1:
                # –í—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ–±—ã—á–Ω–æ screen[1]
                screen_geometry = screens[1].geometry()
                self.presenter_window.move(screen_geometry.x(), screen_geometry.y())
                # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –∏ –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –≤–∏–¥
                self.presenter_window.setWindowFlags(Qt.FramelessWindowHint)
                # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                self.presenter_window.showMaximized()
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.presenter_window:
            self.presenter_window.close()
        self.doc.close()
        event.accept()

def main():
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    if len(sys.argv) != 2:
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            app = QApplication(sys.argv)
            
            file_path, _ = QFileDialog.getOpenFileName(
                None, 
                "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª", 
                "", 
                "PDF Files (*.pdf);;All Files (*)"
            )
            
            if not file_path:
                print("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        file_path = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    try:
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥), —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if not QApplication.instance():
            app = QApplication(sys.argv)
        else:
            app = QApplication.instance()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QPushButton {
                padding: 8px 16px;
                background-color: #2196F3;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
            QLabel {
                font-size: 14px;
                padding: 5px;
            }
            QScrollArea {
                border: 1px solid #cccccc;
                background-color: white;
            }
        """)
        
        viewer = PDFViewer(file_path)
        viewer.show()
        
        sys.exit(app.exec_())
        
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()